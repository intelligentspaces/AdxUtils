// Databricks notebook source
// MAGIC %md
// MAGIC 
// MAGIC # Read data from Azure Data Explorer
// MAGIC 
// MAGIC Notebook has been auto-generated by the [AdxUtilities](https://github.com/intelligentspaces/AdxUtils/) command line tool.
// MAGIC 
// MAGIC For information on how to configure your cluster to use the libraries required for this notebook, please see the [Azure Data Explorer Connector for Apache Spark](https://learn.microsoft.com/azure/data-explorer/spark-connector) documentation.

// COMMAND ----------

import com.microsoft.kusto.spark.datasource.KustoSourceOptions
import com.microsoft.azure.kusto.data.ClientRequestProperties

// COMMAND ----------

// MAGIC %md
// MAGIC 
// MAGIC ## Configuration
// MAGIC 
// MAGIC Define the authentication and connection properties for the request

// COMMAND ----------

val kustoClientId = dbutils.secrets.get("secret-scope", "kusto-client-id")
val kustoClientSecret = dbutils.secrets.get("secret-scope", "kusto-client-secret")
val tenantId = dbutils.secrets.get("secret-scope", "kusto-client-tenantid")

val authenticationOptions = Map(
  KustoSourceOptions.KUSTO_AAD_APP_ID -> kustoClientId,
  KustoSourceOptions.KUSTO_AAD_APP_SECRET -> kustoClientSecret,
  KustoSourceOptions.KUSTO_AAD_AUTHORITY_ID -> tenantId,
)

val clientRequestProperties = new ClientRequestProperties()
clientRequestProperties.setOption("norequesttimeout", true)

// COMMAND ----------

val kustoClusterId = "{{cluster-id}}"
val database = "{{database}}"

// COMMAND ----------

// MAGIC %md
// MAGIC 
// MAGIC ## Query definition
// MAGIC 
// MAGIC In this section the query is defined ready for execution

// COMMAND ----------

val query = "colorization_rules | limit 10"

// COMMAND ----------

// MAGIC %md
// MAGIC 
// MAGIC ## Query Execution
// MAGIC 
// MAGIC Once all of the connectivity and query information is defined, read data from the Data Explorer instance as a DataFrame

// COMMAND ----------

val df = spark.read.format("com.microsoft.kusto.spark.datasource")
  .options(authenticationOptions)
  .option(KustoSourceOptions.KUSTO_CLUSTER, kustoClusterId)
  .option(KustoSourceOptions.KUSTO_DATABASE, database)
  .option(KustoSourceOptions.KUSTO_QUERY, query)
  .option(KustoSourceOptions.KUSTO_CLIENT_REQUEST_PROPERTIES_JSON, clientRequestProperties.toString)
  .option(KustoSourceOptions.KUSTO_READ_MODE, "ForceDistributedMode")
  .load()

// COMMAND ----------

display(df)
